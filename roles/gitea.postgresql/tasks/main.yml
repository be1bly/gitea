---
- name: "Check if repos already edited"
  lineinfile:
    path: /etc/yum.repos.d/CentOS-Base.repo
    line: "exclude=postgresql*"
    state: present
  check_mode: yes
  register: presence

- name: Exclude the search for postgresql on 'Base Repo'
  lineinfile:
    path: /etc/yum.repos.d/CentOS-Base.repo
    insertbefore: '^#released updates'
    line: "#Exclude the search for postgresql\nexclude=postgresql*\n"
    owner: root
    group: root
    mode: '0644'
  when: presence.changed == true

- name: Exclude the search for postgresql on 'Updates Repo'
  lineinfile:
    path: /etc/yum.repos.d/CentOS-Base.repo
    insertbefore: '^#additional packages that may be useful'
    line: "#Exclude the search for postgresql\nexclude=postgresql*\n"
    owner: root
    group: root
    mode: '0644'
  when: presence.changed == true

- name: Setting up PostgreSQL Repo. Step 1. Download Repos RPM file.
  yum:
    name: "https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm"
    state: present

- name: Setting up PostgreSQL Repo. Step 2. Import PostgreSQL GPG key.
  rpm_key:
    key: "https://download.postgresql.org/pub/repos/yum/RPM-GPG-KEY-PGDG-{{ postgresql_version }}"
    state: present

- name: Install PostgreSQL server.
  yum:
    state: present
    name:
      - postgresql{{ postgresql_version }}-server
      - python2-psycopg2
  
- name: Check if PostgreSQL already was configured.
  file:
    path: "/var/lib/pgsql/12/data/postgresql.conf"
    state: absent
  check_mode: yes
  register: pgsql_configured

- name: First initialization of PostgreSQL server.
  shell: "postgresql-{{ postgresql_version }}-setup initdb"
  when: pgsql_configured.changed == false 
  
- name: Change encryption method for PostgreSQL
  lineinfile:
    path: "/var/lib/pgsql/{{ postgresql_version }}/data/postgresql.conf"
    regexp: "^#password_encryption = md5"
    line: "password_encryption = scram-sha-256"

- name: Change default auth method for users.
  lineinfile:
    path: "/var/lib/pgsql/{{ postgresql_version }}/data/pg_hba.conf"
    regexp: "^local   all             all                                     peer"
    line: "local   all             postgres                                peer"

- name: Comment ident method auth for all users
  lineinfile:
    path: "/var/lib/pgsql/{{ postgresql_version }}/data/pg_hba.conf"
    regexp: "^host    all             all             127.0.0.1/32            ident"
    line: "#host    all             all             127.0.0.1/32            ident"
    
- name: Check if User information was already added.
  shell: "awk '/^host giteadb gitea/ {print}' /var/lib/pgsql/{{ postgresql_version }}/data/pg_hba.conf"
  register: user_was_added

- name: Add User and Database information in pg_hba.conf
  lineinfile:
    path: "/var/lib/pgsql/{{ postgresql_version }}/data/pg_hba.conf"
    insertafter: EOF
    line: "host {{ gitea_database }} {{ gitea_linux_user }} 127.0.0.1/32 scram-sha-256\n"
  when: user_was_added.stdout != 'host giteadb gitea 127.0.0.1/32 scram-sha-256'

- name: Start PostgreSQL server.
  service:
    name: postgresql-{{ postgresql_version }}
    state: started
    enabled: yes

- name: Create database for gitea
  become: yes
  become_user: postgres
  postgresql_db:
    name: "{{ gitea_database }}"
    encoding: UTF-8
    lc_collate: en_US.UTF-8
    lc_ctype: en_US.UTF-8
    template: template0
    
- name: Create database user.
  become: yes
  become_user: postgres
  postgresql_user:
    db: "{{ gitea_database }}"
    name: "{{ gitea_linux_user }}"
    password: "{{ gitea_database_passwd }}"
    priv: "ALL"  
    no_password_changes: yes
    expires: infinity

- name: Ensure we have access from the new user
  become: yes
  become_user: postgres
  postgresql_privs:
    db: "{{ gitea_database }}"
    role: "{{ gitea_linux_user }}"
    objs: ALL_IN_SCHEMA
    priv: ALL
  notify: restart postgresql
